

kro | Kube Resource Orchestrator
This project aims to simplify the creation and management of complex custom resources for Kubernetes.

Kube Resource Orchestrator (kro) provides a powerful abstraction layer that allows you to define complex multi-resource constructs as reusable components in your applications and systems. You define these using kro's fundamental custom resource, ResourceGroup. This resource serves as a blueprint for creating and managing collections of underlying Kubernetes resources.

With kro, you define custom resources as your fundamental building blocks for Kubernetes. These building blocks can include other Kubernetes resources, either native or custom, and can specify the dependencies between them. This lets you define complex custom resources, and include default configurations for their use. The kro controller will determine the dependencies between resources, establish the correct order of operations to create and configure them, and then dynamically create and manage all of the underlying resources for you.

kro is Kubernetes native and integrates seamlessly with existing tools to preserve familiar processes and interfaces.

you are an expert at kro please understand the docs available below this is from official page

---
sidebar_position: 2
---

# Simple Schema

**kro** follows a different approach for defining your API schema and shapes. It
leverages a human-friendly and readable syntax that is OpenAPI specification
compatible. Here's a comprehensive example:

```yaml
apiVersion: kro.run/v1alpha1
kind: ResourceGroup
metadata:
  name: web-application
spec:
  schema:
    apiVersion: v1alpha1
    kind: WebApplication
    spec:
      # Basic types
      name: string | required=true description="My Name"
      replicas: integer | default=1 minimum=1 maximum=100
      image: string | required=true

      # Structured type
      ingress:
        enabled: boolean | default=false
        host: string | default="example.com"
        path: string | default="/"

      # Array type
      ports: "[]integer"

      # Map type
      env: "map[string]string"

    status:
      # Status fields with auto-inferred types
      availableReplicas: ${deployment.status.availableReplicas}
      serviceEndpoint: ${service.status.loadBalancer.ingress[0].hostname}
```

## Type Definitions

### Basic Types

kro supports these foundational types:

- `string`: Text values
- `integer`: Whole numbers
- `boolean`: True/False values
- `number`: Decimal numbers

For example:

```yaml
name: string
age: integer
enabled: boolean
price: number
```

### Structure Types

You can create complex objects by nesting fields. Each field can use any type,
including other structures:

```yaml
# Simple structure
address:
  street: string
  city: string
  zipcode: string

# Nested structures
user:
  name: string
  address: # Nested object
    street: string
    city: string
  contacts: "[]string" # Array of strings
```
---
sidebar_position: 1
---

# ResourceGroups

ResourceGroups are the fundamental building blocks in **kro**. They provide a
way to define, organize, and manage sets of related Kubernetes resources as a
single, reusable unit.

## What is a ResourceGroup?

A **ResourceGroup** is a custom resource that lets you create new Kubernetes
APIs for deploying multiple resources together. It acts as a blueprint,
defining:

- What users can configure (schema)
- What resources to create (resources)
- How resources reference each other (dependencies)
- When resources should be included (conditions)
- What status to expose (status)

When you create a **ResourceGroup**, kro generates a new API (a.k.a Custom
Resource Defintion) in your cluster that others can use to deploy resources in a
consistent, controlled way.

## Anatomy of a ResourceGroup

A ResourceGroup, like any Kubernetes resource, consists of three main parts:

1. **Metadata**: name, namespace, labels, etc.
2. **Spec**: Defines the structure and properties of the ResourceGroup
3. **Status**: Reflects the current state of the ResourceGroup

The `spec` section of a ResourceGroup contains two main components:

- **Schema**: Defines what an instance of your API looks like:
  - What users can configure during creation and update
  - What status information they can view
  - Default values and validation rules
- **Resources**: Specifies the Kubernetes resources to create:
  - Resource templates
  - Dependencies between resources
  - Conditions for inclusion
  - Readiness criteria

This structure translates to YAML as follows:

```yaml
apiVersion: kro.run/v1alpha1
kind: ResourceGroup
metadata:
  name: my-resourcegroup # Metadata section
spec:
  schema: # Define your API
    apiVersion: v1alpha1 # API version
    kind: MyAPI # API kind
    spec: {} # fields users can configure
    status: {} # fields kro will populate

  # Define the resources kro will manage
  resources:
    - id: resource1
      # declare your resources along with default values and variables
      template: {}
```

Let's look at each component in detail...

## Understanding the Schema

The schema section defines your new API's structure. It determines:

- What fields users can configure when creating instances
- What status information they can view
- Type validation and default values

Here's an example schema:

```yaml
schema:
  apiVersion: v1alpha1
  kind: WebApplication # This becomes your new API type
  spec:
    # Fields users can configure using a simple, straightforward syntax
    name: string
    image: string | default="nginx"
    replicas: integer | default=3
    ingress:
      enabled: boolean | default=false

  status:
    # Fields kro will populate automatically from your resources
    # Types are inferred from these CEL expressions
    availableReplicas: ${deployment.status.availableReplicas}
    conditions: ${deployment.status.conditions}
```

**kro** follows a different approach for defining your API schema and shapes. It
leverages a human-friendly and readable syntax that is OpenAPI spec compatible.
No need to write complex OpenAPI schemas - just define your fields and types in
a straightforward way. For the complete specification of this format, check out
the [Simple Schema specification](./10-simple-schema.md). Status fields use CEL
expressions to reference fields from resources defined in your ResourceGroup.
kro automatically:

- Infers the correct types from your expressions
- Validates that referenced resources exist
- Updates these fields as your resources change

## ResourceGroup Processing

When you create a **ResourceGroup**, kro processes it in several steps to ensure
correctness and set up the necessary components:

1. **Validation**: kro validates your **ResourceGroup** to ensure it's well
   formed and follows the correct syntax, maximizing the chances of successful
   deployment, and catching as many errors as possible early on. It:

   - Validates your schema definition follows the simple schema format
   - Ensures all resource templates are valid Kubernetes manifests
   - Checks that referenced values exist and are of the correct type
   - Confirms resource dependencies form a valid Directed Acycled Graph(DAG)
     without cycles
   - Validates all CEL expressions in status fields and conditions

2. **API Generation**: kro generates and registers a new CRD in your cluster
   based on your schema. For example, if your **ResourceGroup** defines a
   `WebApplication` API, kro creates a CRD that:

   - Provides API validation based on your schema definition
   - Automatically applies default values you've defined
   - Makes status information available to users and other systems
   - Integrates seamlessly with kubectl and other Kubernetes tools

3. **Controller Configuration**: kro configures itself to watch for instances of
   your new API and:

   - Creates all required resources following the dependency order
   - Manages references and value passing between resources
   - Handles the complete lifecycle for create, update, and delete operations
   - Keeps status information up to date based on actual resource states

For instance, when you create a `WebApplication` ResourceGroup, kro generates
the `webapplications.kro.run` CRD. When users create instances of this API, kro
manages all the underlying resources (Deployments, Services, Custom Resources,
etc.) automatically.

kro continuously monitors your ResourceGroup for changes, updating the API and
its behavior accordingly.

## ResourceGroup Instance Example

After the **ResourceGroup** is validated and registered in the cluster, users
can can create instances of it. Here's an example of how an instance for the
`SimpleWebApp` might look:

```yaml title="my-web-app-instance.yaml"
apiVersion: kro.run/v1alpha1
kind: SimpleWebApp
metadata:
  name: my-web-app
spec:
  appName: awesome-app
  image: nginx:latest
  replicas: 3
```


### Array Types

Arrays are denoted using `[]` syntax:

- Basic arrays: `[]string`, `[]integer`, `[]boolean`

Examples:

```yaml
tags: []string
ports: []integer
```

### Map Types

Maps are key-value pairs denoted as `map[keyType]valueType`:

- `map[string]string`: String to string mapping
- `map[string]integer`: String to integer mapping

Examples:

```yaml
labels: "map[string]string"
metrics: "map[string]number"
```

## Validation and Documentation

Fields can have multiple markers for validation and documentation:

```yaml
name: string | required=true default="app" description="Application name"
replicas: integer | default=3 minimum=1 maximum=10
mode: string | enum="debug,info,warn,error" default="info"
```

### Supported Markers

- `required=true`: Field must be provided
- `default=value`: Default value if not specified
- `description="..."`: Field documentation
- `enum="value1,value2"`: Allowed values
- `minimum=value`: Minimum value for numbers
- `maximum=value`: Maximum value for numbers

Multiple markers can be combined using the `|` separator.

For example:

```yaml
name: string | required=true default="app" description="Application name"
```

## Status Fields

Status fields use CEL expressions to reference values from resources. kro
automatically:

- Infers the correct types from the expressions
- Validates that referenced resources exist
- Updates values when the underlying resources change

```yaml
status:
  # Types are inferred from the referenced fields
  availableReplicas: ${deployment.status.availableReplicas}
  endpoint: ${service.status.loadBalancer.ingress[0].hostname}
```

## Default Status Fields

kro automatically injects two fields to every instance's status:

### 1. Conditions

An array of condition objects tracking the instance's state:

```yaml
status:
  conditions:
    - type: string # e.g., "Ready", "Progressing"
      status: string # "True", "False", "Unknown"
      lastTransitionTime: string
      reason: string
      message: string
```

Common condition types:

- `Ready`: Instance is fully reconciled
- `Progressing`: Working towards desired state
- `Degraded`: Operational but not optimal
- `Error`: Reconciliation error occurred

### 2. State

A high-level summary of the instance's status:

```yaml
status:
  state: string # Ready, Progressing, Degraded, Unknown, Deleting
```

:::tip

`conditions` and `state` are reserved words. If defined in your schema, kro will
override them with its own values.

:::

---
sidebar_position: 15
---

# Instances

Once **kro** processes your ResourceGroup, it creates a new API in your cluster.
Users can then create instances of this API to deploy resources in a consistent,
controlled way.

## Understanding Instances

An instance represents your deployed application. When you create an instance,
you're telling kro "I want this set of resources running in my cluster". The
instance contains your configuration values and serves as the single source of
truth for your application's desired state. Here's an example instance of our
WebApplication API:

```yaml
apiVersion: v1alpha1
kind: WebApplication
metadata:
  name: my-app
spec:
  name: web-app
  image: nginx:latest
  ingress:
    enabled: true
```

When you create this instance, kro:

- Creates all required resources (Deployment, Service, Ingress)
- Configures them according to your specification
- Manages them as a single unit
- Keeps their status up to date

## How kro Manages Instances

kro uses the standard Kubernetes reconciliation pattern to manage instances:

1. **Observe**: Watches for changes to your instance or its resources
2. **Compare**: Checks if current state matches desired state
3. **Act**: Creates, updates, or deletes resources as needed
4. **Report**: Updates status to reflect current state

This continuous loop ensures your resources stay in sync with your desired
state, providing features like:

- Self-healing
- Automatic updates
- Consistent state management
- Status tracking

## Monitoring Your Instances

KRO provides rich status information for every instance:

```bash
$ kubectl get webapplication my-app
NAME     STATUS    SYNCED   AGE
my-app   ACTIVE    true     30s
```

For detailed status, check the instance's YAML:

```yaml
status:
  state: ACTIVE # High-level instance state
  availableReplicas: 3 # Status from Deployment
  conditions: # Detailed status conditions
    - type: Ready
      status: "True"
      lastTransitionTime: "2024-07-23T01:01:59Z"
      reason: ResourcesAvailable
      message: "All resources are available and configured correctly"
```

### Understanding Status

Every instance includes:

1. **State**: High-level status

   - `Running`: All resources are ready
   - `Progressing`: Working towards desired state
   - `Failed`: Error occurred
   - `Terminating`: Being deleted

2. **Conditions**: Detailed status information

   - `Ready`: Instance is fully operational
   - `Progressing`: Changes are being applied
   - `Degraded`: Operating but not optimal
   - `Error`: Problems detected

3. **Resource Status**: Status from your resources
   - Values you defined in your ResourceGroup's status section
   - Automatically updated as resources change

## Best Practices

- **Version Control**: Keep your instance definitions in version control
  alongside your application code. This helps track changes, rollback when
  needed, and maintain configuration history.

- **Use Labels Effectively**: Add meaningful labels to your instances for better
  organization, filtering, and integration with other tools. kro propagates
  labels to the sub resources for easy identification.

- **Active Monitoring**: Regularly check instance status beyond just "Running".
  Watch conditions, resource status, and events to catch potential issues early
  and understand your application's health.

- **Regular Reviews**: Periodically review your instance configurations to
  ensure they reflect current requirements and best practices. Update resource
  requests, limits, and other configurations as your application needs evolve.
