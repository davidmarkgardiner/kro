Name:         script-configmap
Namespace:    default
Labels:       kro.run/controller-pod-id=kro-pod
              kro.run/instance-id=c331f16b-27fe-460a-ae62-dd26f0cce8b0
              kro.run/instance-name=test-configmap
              kro.run/instance-namespace=logging
              kro.run/kro-version=0.1.0
              kro.run/owned=true
              kro.run/resource-group-id=c1f09ee5-010b-455f-b30e-d0a93f9ef8bd
              kro.run/resource-group-name=configmap.kro.run
              kro.run/resource-group-namespace=logging
Annotations:  <none>

Data
====
api_endpoint:
----
https://api.example.com
database_url:
----
postgresql://db.example.com:5432
max_connections:
----
100
process-data.py:
----
#!/usr/bin/env python3

import os
import time
import json

def main():
    print("Starting data processing...")
    
    # Configuration
    config = {
        "input_dir": "/app/data/input",
        "output_dir": "/app/data/output",
        "max_batch_size": 1000
    }
    
    # Simulated processing
    def process_batch(batch_id):
        print(f"Processing batch {batch_id}")
        time.sleep(1)
        return {"processed": True, "batch_id": batch_id}
    
    # Main processing loop
    for i in range(5):
        result = process_batch(i)
        print(json.dumps(result))
    
    print("Processing complete!")

if __name__ == "__main__":
    main() 

startup-script.sh:
----
#!/bin/bash

# Example startup script
echo "Starting application initialization..."

# Set environment variables
export DB_URL=postgresql://db.example.com:5432
export API_ENDPOINT=https://api.example.com

# Create necessary directories
mkdir -p /app/data
mkdir -p /app/logs

# Check system requirements
echo "Checking system requirements..."
MEMORY_AVAILABLE=$(free -m | awk '/Mem:/ {print $2}')
if [ "$MEMORY_AVAILABLE" -lt 1024 ]; then
  echo "Warning: Less than 1GB of RAM available"
fi

# Initialize application
echo "Running application setup..."
for i in {1..3}; do
  echo "Setup step $i..."
  sleep 1
done

# Start monitoring
echo "Starting monitoring process..."
while true; do
  echo "Healthcheck: $(date)"
  sleep 300
done


BinaryData
====

Events:  <none>
